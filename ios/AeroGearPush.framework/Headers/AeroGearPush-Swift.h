// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/// Represents the set of allowed device metadata.
SWIFT_PROTOCOL("_TtP12AeroGearPush23ClientDeviceInformation_")
@protocol ClientDeviceInformation
/// The Device Token which identifies the device within APNs.
@property (nonatomic, copy) NSData * _Nullable deviceToken;
/// The ID of the mobile Variant, for which this client will be registered.
@property (nonatomic, copy) NSString * _Nullable variantID;
/// The mobile Variant’s secret.
@property (nonatomic, copy) NSString * _Nullable variantSecret;
/// Application specific alias to identify users with the system.
/// E.g. email address or username
@property (nonatomic, copy) NSString * _Nullable alias;
/// Some categories, used for tagging the device (metadata)
@property (nonatomic, copy) NSArray<NSString *> * _Nullable categories;
/// The name of the underlying OS (e.g. iOS)
@property (nonatomic, copy) NSString * _Nullable operatingSystem;
/// The version of the used OS (e.g. 6.1.3)
@property (nonatomic, copy) NSString * _Nullable osVersion;
/// The device type (e.g. iPhone or iPod)
@property (nonatomic, copy) NSString * _Nullable deviceType;
@end

@class NSError;
@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;

/// Utility to register an iOS device with the AeroGear UnifiedPush Server.
SWIFT_CLASS("_TtC12AeroGearPush18DeviceRegistration")
@interface DeviceRegistration : NSObject <NSURLSessionTaskDelegate>
/// An initializer method to instantiate an DeviceRegistration object.
/// :param: serverURL the URL of the AeroGear Push server.
/// :returns: the DeviceRegistration object.
- (nonnull instancetype)initWithServerURL:(NSURL * _Nonnull)serverURL OBJC_DESIGNATED_INITIALIZER;
/// An initializer method to instantiate an DeviceRegistration object with default app plist config file.
/// :param: config file name where to fetch AeroGear UnifiedPush server configuration.
/// :returns: the DeviceRegistration object.
- (nonnull instancetype)initWithConfig:(NSString * _Nonnull)config;
/// An initializer method to instantiate an DeviceRegistration object.
/// :returns: the DeviceRegistration object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)overrideWithPushProperties:(NSDictionary<NSString *, NSString *> * _Nonnull)pushProperties;
/// Registers your mobile device to the AeroGear UnifiedPush server so it can start receiving messages.
/// Registration information can be provided within clientInfo block or by providing a plist file
/// containing the require registration information as below:
/// <plist version="1.0">
/// <dict>
/// <key>serverURL</key>
/// <string>pushServerURL e.g http(s)//host:port/context</string>
/// <key>variantID</key>
/// <string>variantID e.g. 1234456-234320</string>
/// <key>variantSecret</key>
/// <string>variantSecret e.g. 1234456-234320</string>
/// …
/// </dict>
/// </plist>
/// :param: clientInfo A block object which passes in an implementation of the ClientDeviceInformation protocol that
/// holds configuration metadata that would be posted to the server during the registration process.
/// :param: success A block object to be executed when the registration operation finishes successfully.
/// This block has no return value.
/// :param: failure A block object to be executed when the registration operation finishes unsuccessfully.
/// This block has no return value and takes one argument: The <code>NSError</code> object describing
/// the error that occurred during the registration process.
- (void)registerWithClientInfo:(void (^ _Null_unspecified)(id <ClientDeviceInformation> _Nonnull))clientInfo success:(void (^ _Null_unspecified)(void))success failure:(void (^ _Null_unspecified)(NSError * _Nonnull))failure;
/// We need to cater for possible redirection
/// NOTE:
/// As per Apple doc, the passed req is ‘the proposed redirected request’. But we cannot return it as it is. The reason is,
/// user-agents (and in our case NSURLconnection) ‘erroneous’ after a 302-redirection modify the request’s http method
/// and sets it to GET if the client initially performed a POST (as we do here).
/// \code
///   See  RFC 2616 (section 10.3.3) http://www.ietf.org/rfc/rfc2616.txt
///   and related blog: http://tewha.net/2012/05/handling-302303-redirects/
///
///   We need to 'override' that 'default' behaviour to return the original attempted NSURLRequest
///   with the URL parameter updated to point to the new 'Location' header.
///
/// \endcode
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)redirectResponse newRequest:(NSURLRequest * _Nonnull)redirectReq completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
@end

#pragma clang diagnostic pop
